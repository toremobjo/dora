# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imc_ros_msgs/PlanControlState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import imc_ros_msgs.msg
import std_msgs.msg

class PlanControlState(genpy.Message):
  _md5sum = "37c774ecf5519b9a486a42a0755de1f7"
  _type = "imc_ros_msgs/PlanControlState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """imc_ros_msgs/Header header
std_msgs/UInt8 state
std_msgs/String plan_id
std_msgs/Int32 plan_eta
std_msgs/Float32 plan_progress
std_msgs/String man_id
std_msgs/UInt16 man_type
std_msgs/Int32 man_eta
std_msgs/UInt8 last_outcome #See IMC.xml


================================================================================
MSG: imc_ros_msgs/Header
std_msgs/Header rosheader
std_msgs/UInt16 sync
std_msgs/UInt16 mgid
std_msgs/UInt16 size
std_msgs/Float64 timestamp
std_msgs/UInt16 src
std_msgs/UInt8 src_ent
std_msgs/UInt16 dst
std_msgs/UInt8 dst_ent

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/UInt16
uint16 data

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/UInt8
uint8 data

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['header','state','plan_id','plan_eta','plan_progress','man_id','man_type','man_eta','last_outcome']
  _slot_types = ['imc_ros_msgs/Header','std_msgs/UInt8','std_msgs/String','std_msgs/Int32','std_msgs/Float32','std_msgs/String','std_msgs/UInt16','std_msgs/Int32','std_msgs/UInt8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,state,plan_id,plan_eta,plan_progress,man_id,man_type,man_eta,last_outcome

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanControlState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.state is None:
        self.state = std_msgs.msg.UInt8()
      if self.plan_id is None:
        self.plan_id = std_msgs.msg.String()
      if self.plan_eta is None:
        self.plan_eta = std_msgs.msg.Int32()
      if self.plan_progress is None:
        self.plan_progress = std_msgs.msg.Float32()
      if self.man_id is None:
        self.man_id = std_msgs.msg.String()
      if self.man_type is None:
        self.man_type = std_msgs.msg.UInt16()
      if self.man_eta is None:
        self.man_eta = std_msgs.msg.Int32()
      if self.last_outcome is None:
        self.last_outcome = std_msgs.msg.UInt8()
    else:
      self.header = imc_ros_msgs.msg.Header()
      self.state = std_msgs.msg.UInt8()
      self.plan_id = std_msgs.msg.String()
      self.plan_eta = std_msgs.msg.Int32()
      self.plan_progress = std_msgs.msg.Float32()
      self.man_id = std_msgs.msg.String()
      self.man_type = std_msgs.msg.UInt16()
      self.man_eta = std_msgs.msg.Int32()
      self.last_outcome = std_msgs.msg.UInt8()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs))
      _x = self.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBH2B().pack(_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.state.data))
      _x = self.plan_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_if().pack(_x.plan_eta.data, _x.plan_progress.data))
      _x = self.man_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HiB().pack(_x.man_type.data, _x.man_eta.data, _x.last_outcome.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.state is None:
        self.state = std_msgs.msg.UInt8()
      if self.plan_id is None:
        self.plan_id = std_msgs.msg.String()
      if self.plan_eta is None:
        self.plan_eta = std_msgs.msg.Int32()
      if self.plan_progress is None:
        self.plan_progress = std_msgs.msg.Float32()
      if self.man_id is None:
        self.man_id = std_msgs.msg.String()
      if self.man_type is None:
        self.man_type = std_msgs.msg.UInt16()
      if self.man_eta is None:
        self.man_eta = std_msgs.msg.Int32()
      if self.last_outcome is None:
        self.last_outcome = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.state.data,) = _get_struct_3HdHBH2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plan_id.data = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.plan_eta.data, _x.plan_progress.data,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.man_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.man_id.data = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.man_type.data, _x.man_eta.data, _x.last_outcome.data,) = _get_struct_HiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs))
      _x = self.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBH2B().pack(_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.state.data))
      _x = self.plan_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_if().pack(_x.plan_eta.data, _x.plan_progress.data))
      _x = self.man_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HiB().pack(_x.man_type.data, _x.man_eta.data, _x.last_outcome.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.state is None:
        self.state = std_msgs.msg.UInt8()
      if self.plan_id is None:
        self.plan_id = std_msgs.msg.String()
      if self.plan_eta is None:
        self.plan_eta = std_msgs.msg.Int32()
      if self.plan_progress is None:
        self.plan_progress = std_msgs.msg.Float32()
      if self.man_id is None:
        self.man_id = std_msgs.msg.String()
      if self.man_type is None:
        self.man_type = std_msgs.msg.UInt16()
      if self.man_eta is None:
        self.man_eta = std_msgs.msg.Int32()
      if self.last_outcome is None:
        self.last_outcome = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.state.data,) = _get_struct_3HdHBH2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plan_id.data = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.plan_eta.data, _x.plan_progress.data,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.man_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.man_id.data = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.man_type.data, _x.man_eta.data, _x.last_outcome.data,) = _get_struct_HiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3HdHBH2B = None
def _get_struct_3HdHBH2B():
    global _struct_3HdHBH2B
    if _struct_3HdHBH2B is None:
        _struct_3HdHBH2B = struct.Struct("<3HdHBH2B")
    return _struct_3HdHBH2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_HiB = None
def _get_struct_HiB():
    global _struct_HiB
    if _struct_HiB is None:
        _struct_HiB = struct.Struct("<HiB")
    return _struct_HiB
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if

// Generated by gencpp from file imc_ros_msgs/FollowReference.msg
// DO NOT EDIT!


#ifndef IMC_ROS_MSGS_MESSAGE_FOLLOWREFERENCE_H
#define IMC_ROS_MSGS_MESSAGE_FOLLOWREFERENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <imc_ros_msgs/Header.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace imc_ros_msgs
{
template <class ContainerAllocator>
struct FollowReference_
{
  typedef FollowReference_<ContainerAllocator> Type;

  FollowReference_()
    : header()
    , control_src()
    , control_ent()
    , timeout()
    , loiter_radius()
    , altitude_interval()  {
    }
  FollowReference_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control_src(_alloc)
    , control_ent(_alloc)
    , timeout(_alloc)
    , loiter_radius(_alloc)
    , altitude_interval(_alloc)  {
  (void)_alloc;
    }



   typedef  ::imc_ros_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _control_src_type;
  _control_src_type control_src;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _control_ent_type;
  _control_ent_type control_ent;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _timeout_type;
  _timeout_type timeout;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _loiter_radius_type;
  _loiter_radius_type loiter_radius;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _altitude_interval_type;
  _altitude_interval_type altitude_interval;





  typedef boost::shared_ptr< ::imc_ros_msgs::FollowReference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imc_ros_msgs::FollowReference_<ContainerAllocator> const> ConstPtr;

}; // struct FollowReference_

typedef ::imc_ros_msgs::FollowReference_<std::allocator<void> > FollowReference;

typedef boost::shared_ptr< ::imc_ros_msgs::FollowReference > FollowReferencePtr;
typedef boost::shared_ptr< ::imc_ros_msgs::FollowReference const> FollowReferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imc_ros_msgs::FollowReference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imc_ros_msgs::FollowReference_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::FollowReference_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.control_src == rhs.control_src &&
    lhs.control_ent == rhs.control_ent &&
    lhs.timeout == rhs.timeout &&
    lhs.loiter_radius == rhs.loiter_radius &&
    lhs.altitude_interval == rhs.altitude_interval;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imc_ros_msgs::FollowReference_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::FollowReference_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imc_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::FollowReference_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::FollowReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::FollowReference_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e2166f80c57b484155a0a8b3e650ca";
  }

  static const char* value(const ::imc_ros_msgs::FollowReference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2e2166f80c57b48ULL;
  static const uint64_t static_value2 = 0x4155a0a8b3e650caULL;
};

template<class ContainerAllocator>
struct DataType< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/FollowReference";
  }

  static const char* value(const ::imc_ros_msgs::FollowReference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/Header header\n"
"std_msgs/UInt16 control_src\n"
"std_msgs/UInt8 control_ent\n"
"std_msgs/Float32 timeout\n"
"std_msgs/Float32 loiter_radius\n"
"std_msgs/Float32 altitude_interval\n"
"\n"
"================================================================================\n"
"MSG: imc_ros_msgs/Header\n"
"std_msgs/Header rosheader\n"
"std_msgs/UInt16 sync\n"
"std_msgs/UInt16 mgid\n"
"std_msgs/UInt16 size\n"
"std_msgs/Float64 timestamp\n"
"std_msgs/UInt16 src\n"
"std_msgs/UInt8 src_ent\n"
"std_msgs/UInt16 dst\n"
"std_msgs/UInt8 dst_ent\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16\n"
"uint16 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::imc_ros_msgs::FollowReference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control_src);
      stream.next(m.control_ent);
      stream.next(m.timeout);
      stream.next(m.loiter_radius);
      stream.next(m.altitude_interval);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowReference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imc_ros_msgs::FollowReference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imc_ros_msgs::FollowReference_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::imc_ros_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_src: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.control_src);
    s << indent << "control_ent: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.control_ent);
    s << indent << "timeout: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.timeout);
    s << indent << "loiter_radius: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.loiter_radius);
    s << indent << "altitude_interval: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.altitude_interval);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMC_ROS_MSGS_MESSAGE_FOLLOWREFERENCE_H

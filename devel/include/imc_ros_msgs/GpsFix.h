// Generated by gencpp from file imc_ros_msgs/GpsFix.msg
// DO NOT EDIT!


#ifndef IMC_ROS_MSGS_MESSAGE_GPSFIX_H
#define IMC_ROS_MSGS_MESSAGE_GPSFIX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <imc_ros_msgs/Header.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float32.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace imc_ros_msgs
{
template <class ContainerAllocator>
struct GpsFix_
{
  typedef GpsFix_<ContainerAllocator> Type;

  GpsFix_()
    : header()
    , validity()
    , type()
    , utc_year()
    , utc_month()
    , utc_day()
    , utc_time()
    , lat()
    , lon()
    , height()
    , satelllites()
    , cog()
    , sog()
    , hdop()
    , vdop()
    , hacc()
    , vacc()  {
    }
  GpsFix_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , validity(_alloc)
    , type(_alloc)
    , utc_year(_alloc)
    , utc_month(_alloc)
    , utc_day(_alloc)
    , utc_time(_alloc)
    , lat(_alloc)
    , lon(_alloc)
    , height(_alloc)
    , satelllites(_alloc)
    , cog(_alloc)
    , sog(_alloc)
    , hdop(_alloc)
    , vdop(_alloc)
    , hacc(_alloc)
    , vacc(_alloc)  {
  (void)_alloc;
    }



   typedef  ::imc_ros_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _validity_type;
  _validity_type validity;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _utc_year_type;
  _utc_year_type utc_year;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _utc_month_type;
  _utc_month_type utc_month;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _utc_day_type;
  _utc_day_type utc_day;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _utc_time_type;
  _utc_time_type utc_time;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _lat_type;
  _lat_type lat;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _lon_type;
  _lon_type lon;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _height_type;
  _height_type height;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _satelllites_type;
  _satelllites_type satelllites;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _cog_type;
  _cog_type cog;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _sog_type;
  _sog_type sog;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _hdop_type;
  _hdop_type hdop;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _vdop_type;
  _vdop_type vdop;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _hacc_type;
  _hacc_type hacc;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _vacc_type;
  _vacc_type vacc;





  typedef boost::shared_ptr< ::imc_ros_msgs::GpsFix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imc_ros_msgs::GpsFix_<ContainerAllocator> const> ConstPtr;

}; // struct GpsFix_

typedef ::imc_ros_msgs::GpsFix_<std::allocator<void> > GpsFix;

typedef boost::shared_ptr< ::imc_ros_msgs::GpsFix > GpsFixPtr;
typedef boost::shared_ptr< ::imc_ros_msgs::GpsFix const> GpsFixConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imc_ros_msgs::GpsFix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imc_ros_msgs::GpsFix_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::GpsFix_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.validity == rhs.validity &&
    lhs.type == rhs.type &&
    lhs.utc_year == rhs.utc_year &&
    lhs.utc_month == rhs.utc_month &&
    lhs.utc_day == rhs.utc_day &&
    lhs.utc_time == rhs.utc_time &&
    lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.height == rhs.height &&
    lhs.satelllites == rhs.satelllites &&
    lhs.cog == rhs.cog &&
    lhs.sog == rhs.sog &&
    lhs.hdop == rhs.hdop &&
    lhs.vdop == rhs.vdop &&
    lhs.hacc == rhs.hacc &&
    lhs.vacc == rhs.vacc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imc_ros_msgs::GpsFix_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::GpsFix_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imc_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::GpsFix_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::GpsFix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::GpsFix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e630f5dd515c436f3c9c075f57ba522";
  }

  static const char* value(const ::imc_ros_msgs::GpsFix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e630f5dd515c436ULL;
  static const uint64_t static_value2 = 0xf3c9c075f57ba522ULL;
};

template<class ContainerAllocator>
struct DataType< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/GpsFix";
  }

  static const char* value(const ::imc_ros_msgs::GpsFix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/Header header\n"
"std_msgs/UInt16 validity #0x0001=VALID_DATE 0x0002=VALID_TIME 0x0003=VALID_POS 0x0008=VALID_COG etc, see IMC.xml\n"
"std_msgs/UInt8 type #see IMC.xml\n"
"std_msgs/UInt16 utc_year\n"
"std_msgs/UInt8 utc_month\n"
"std_msgs/UInt8 utc_day\n"
"std_msgs/Float32 utc_time\n"
"std_msgs/Float64 lat\n"
"std_msgs/Float64 lon\n"
"std_msgs/Float32 height\n"
"std_msgs/UInt8 satelllites\n"
"std_msgs/Float32 cog\n"
"std_msgs/Float32 sog\n"
"std_msgs/Float32 hdop\n"
"std_msgs/Float32 vdop\n"
"std_msgs/Float32 hacc\n"
"std_msgs/Float32 vacc\n"
"\n"
"================================================================================\n"
"MSG: imc_ros_msgs/Header\n"
"std_msgs/Header rosheader\n"
"std_msgs/UInt16 sync\n"
"std_msgs/UInt16 mgid\n"
"std_msgs/UInt16 size\n"
"std_msgs/Float64 timestamp\n"
"std_msgs/UInt16 src\n"
"std_msgs/UInt8 src_ent\n"
"std_msgs/UInt16 dst\n"
"std_msgs/UInt8 dst_ent\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16\n"
"uint16 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::imc_ros_msgs::GpsFix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.validity);
      stream.next(m.type);
      stream.next(m.utc_year);
      stream.next(m.utc_month);
      stream.next(m.utc_day);
      stream.next(m.utc_time);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.height);
      stream.next(m.satelllites);
      stream.next(m.cog);
      stream.next(m.sog);
      stream.next(m.hdop);
      stream.next(m.vdop);
      stream.next(m.hacc);
      stream.next(m.vacc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsFix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imc_ros_msgs::GpsFix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imc_ros_msgs::GpsFix_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::imc_ros_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "validity: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.validity);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "utc_year: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.utc_year);
    s << indent << "utc_month: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.utc_month);
    s << indent << "utc_day: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.utc_day);
    s << indent << "utc_time: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.utc_time);
    s << indent << "lat: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.lon);
    s << indent << "height: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.height);
    s << indent << "satelllites: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.satelllites);
    s << indent << "cog: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.cog);
    s << indent << "sog: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.sog);
    s << indent << "hdop: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.hdop);
    s << indent << "vdop: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.vdop);
    s << indent << "hacc: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.hacc);
    s << indent << "vacc: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.vacc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMC_ROS_MSGS_MESSAGE_GPSFIX_H

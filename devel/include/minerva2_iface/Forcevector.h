// Generated by gencpp from file minerva2_iface/Forcevector.msg
// DO NOT EDIT!


#ifndef MINERVA2_IFACE_MESSAGE_FORCEVECTOR_H
#define MINERVA2_IFACE_MESSAGE_FORCEVECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace minerva2_iface
{
template <class ContainerAllocator>
struct Forcevector_
{
  typedef Forcevector_<ContainerAllocator> Type;

  Forcevector_()
    : header()
    , fx()
    , fy()
    , fz()
    , froll()
    , fpitch()
    , fyaw()  {
    }
  Forcevector_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fx(_alloc)
    , fy(_alloc)
    , fz(_alloc)
    , froll(_alloc)
    , fpitch(_alloc)
    , fyaw(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _fx_type;
  _fx_type fx;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _fy_type;
  _fy_type fy;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _fz_type;
  _fz_type fz;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _froll_type;
  _froll_type froll;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _fpitch_type;
  _fpitch_type fpitch;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _fyaw_type;
  _fyaw_type fyaw;





  typedef boost::shared_ptr< ::minerva2_iface::Forcevector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::minerva2_iface::Forcevector_<ContainerAllocator> const> ConstPtr;

}; // struct Forcevector_

typedef ::minerva2_iface::Forcevector_<std::allocator<void> > Forcevector;

typedef boost::shared_ptr< ::minerva2_iface::Forcevector > ForcevectorPtr;
typedef boost::shared_ptr< ::minerva2_iface::Forcevector const> ForcevectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::minerva2_iface::Forcevector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::minerva2_iface::Forcevector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::minerva2_iface::Forcevector_<ContainerAllocator1> & lhs, const ::minerva2_iface::Forcevector_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fx == rhs.fx &&
    lhs.fy == rhs.fy &&
    lhs.fz == rhs.fz &&
    lhs.froll == rhs.froll &&
    lhs.fpitch == rhs.fpitch &&
    lhs.fyaw == rhs.fyaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::minerva2_iface::Forcevector_<ContainerAllocator1> & lhs, const ::minerva2_iface::Forcevector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace minerva2_iface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::minerva2_iface::Forcevector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::minerva2_iface::Forcevector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minerva2_iface::Forcevector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minerva2_iface::Forcevector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minerva2_iface::Forcevector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minerva2_iface::Forcevector_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::minerva2_iface::Forcevector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e5bbf4247b7e2801d320d0defabc11e";
  }

  static const char* value(const ::minerva2_iface::Forcevector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e5bbf4247b7e280ULL;
  static const uint64_t static_value2 = 0x1d320d0defabc11eULL;
};

template<class ContainerAllocator>
struct DataType< ::minerva2_iface::Forcevector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "minerva2_iface/Forcevector";
  }

  static const char* value(const ::minerva2_iface::Forcevector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::minerva2_iface::Forcevector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"std_msgs/Float32 fx\n"
"std_msgs/Float32 fy\n"
"std_msgs/Float32 fz\n"
"std_msgs/Float32 froll\n"
"std_msgs/Float32 fpitch\n"
"std_msgs/Float32 fyaw\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::minerva2_iface::Forcevector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::minerva2_iface::Forcevector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fx);
      stream.next(m.fy);
      stream.next(m.fz);
      stream.next(m.froll);
      stream.next(m.fpitch);
      stream.next(m.fyaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Forcevector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::minerva2_iface::Forcevector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::minerva2_iface::Forcevector_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fx: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.fy);
    s << indent << "fz: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.fz);
    s << indent << "froll: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.froll);
    s << indent << "fpitch: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.fpitch);
    s << indent << "fyaw: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.fyaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINERVA2_IFACE_MESSAGE_FORCEVECTOR_H

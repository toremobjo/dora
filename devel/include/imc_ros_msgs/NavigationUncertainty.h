// Generated by gencpp from file imc_ros_msgs/NavigationUncertainty.msg
// DO NOT EDIT!


#ifndef IMC_ROS_MSGS_MESSAGE_NAVIGATIONUNCERTAINTY_H
#define IMC_ROS_MSGS_MESSAGE_NAVIGATIONUNCERTAINTY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <imc_ros_msgs/Header.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace imc_ros_msgs
{
template <class ContainerAllocator>
struct NavigationUncertainty_
{
  typedef NavigationUncertainty_<ContainerAllocator> Type;

  NavigationUncertainty_()
    : header()
    , x()
    , y()
    , z()
    , phi()
    , theta()
    , psi()
    , p()
    , q()
    , r()
    , u()
    , v()
    , w()
    , bias_psi()
    , bias_r()  {
    }
  NavigationUncertainty_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , phi(_alloc)
    , theta(_alloc)
    , psi(_alloc)
    , p(_alloc)
    , q(_alloc)
    , r(_alloc)
    , u(_alloc)
    , v(_alloc)
    , w(_alloc)
    , bias_psi(_alloc)
    , bias_r(_alloc)  {
  (void)_alloc;
    }



   typedef  ::imc_ros_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _z_type;
  _z_type z;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _phi_type;
  _phi_type phi;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _theta_type;
  _theta_type theta;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _psi_type;
  _psi_type psi;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _p_type;
  _p_type p;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _q_type;
  _q_type q;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _r_type;
  _r_type r;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _u_type;
  _u_type u;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _v_type;
  _v_type v;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _w_type;
  _w_type w;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _bias_psi_type;
  _bias_psi_type bias_psi;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _bias_r_type;
  _bias_r_type bias_r;





  typedef boost::shared_ptr< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationUncertainty_

typedef ::imc_ros_msgs::NavigationUncertainty_<std::allocator<void> > NavigationUncertainty;

typedef boost::shared_ptr< ::imc_ros_msgs::NavigationUncertainty > NavigationUncertaintyPtr;
typedef boost::shared_ptr< ::imc_ros_msgs::NavigationUncertainty const> NavigationUncertaintyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.phi == rhs.phi &&
    lhs.theta == rhs.theta &&
    lhs.psi == rhs.psi &&
    lhs.p == rhs.p &&
    lhs.q == rhs.q &&
    lhs.r == rhs.r &&
    lhs.u == rhs.u &&
    lhs.v == rhs.v &&
    lhs.w == rhs.w &&
    lhs.bias_psi == rhs.bias_psi &&
    lhs.bias_r == rhs.bias_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imc_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cbfef2b043880a51dfb47b480a16c78";
  }

  static const char* value(const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cbfef2b043880a5ULL;
  static const uint64_t static_value2 = 0x1dfb47b480a16c78ULL;
};

template<class ContainerAllocator>
struct DataType< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/NavigationUncertainty";
  }

  static const char* value(const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/Header header\n"
"std_msgs/Float32 x\n"
"std_msgs/Float32 y\n"
"std_msgs/Float32 z\n"
"std_msgs/Float32 phi\n"
"std_msgs/Float32 theta\n"
"std_msgs/Float32 psi\n"
"std_msgs/Float32 p\n"
"std_msgs/Float32 q\n"
"std_msgs/Float32 r\n"
"std_msgs/Float32 u\n"
"std_msgs/Float32 v\n"
"std_msgs/Float32 w\n"
"std_msgs/Float32 bias_psi\n"
"std_msgs/Float32 bias_r\n"
"\n"
"================================================================================\n"
"MSG: imc_ros_msgs/Header\n"
"std_msgs/Header rosheader\n"
"std_msgs/UInt16 sync\n"
"std_msgs/UInt16 mgid\n"
"std_msgs/UInt16 size\n"
"std_msgs/Float64 timestamp\n"
"std_msgs/UInt16 src\n"
"std_msgs/UInt8 src_ent\n"
"std_msgs/UInt16 dst\n"
"std_msgs/UInt8 dst_ent\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16\n"
"uint16 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.phi);
      stream.next(m.theta);
      stream.next(m.psi);
      stream.next(m.p);
      stream.next(m.q);
      stream.next(m.r);
      stream.next(m.u);
      stream.next(m.v);
      stream.next(m.w);
      stream.next(m.bias_psi);
      stream.next(m.bias_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationUncertainty_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imc_ros_msgs::NavigationUncertainty_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::imc_ros_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.z);
    s << indent << "phi: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.psi);
    s << indent << "p: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
    s << indent << "q: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.q);
    s << indent << "r: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.r);
    s << indent << "u: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.w);
    s << indent << "bias_psi: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.bias_psi);
    s << indent << "bias_r: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.bias_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMC_ROS_MSGS_MESSAGE_NAVIGATIONUNCERTAINTY_H

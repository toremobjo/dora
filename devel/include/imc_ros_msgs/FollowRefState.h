// Generated by gencpp from file imc_ros_msgs/FollowRefState.msg
// DO NOT EDIT!


#ifndef IMC_ROS_MSGS_MESSAGE_FOLLOWREFSTATE_H
#define IMC_ROS_MSGS_MESSAGE_FOLLOWREFSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <imc_ros_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <imc_ros_msgs/Reference.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace imc_ros_msgs
{
template <class ContainerAllocator>
struct FollowRefState_
{
  typedef FollowRefState_<ContainerAllocator> Type;

  FollowRefState_()
    : header()
    , control_ent()
    , reference()
    , state()
    , plroximity()  {
    }
  FollowRefState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control_ent(_alloc)
    , reference(_alloc)
    , state(_alloc)
    , plroximity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::imc_ros_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _control_ent_type;
  _control_ent_type control_ent;

   typedef  ::imc_ros_msgs::Reference_<ContainerAllocator>  _reference_type;
  _reference_type reference;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _plroximity_type;
  _plroximity_type plroximity;





  typedef boost::shared_ptr< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> const> ConstPtr;

}; // struct FollowRefState_

typedef ::imc_ros_msgs::FollowRefState_<std::allocator<void> > FollowRefState;

typedef boost::shared_ptr< ::imc_ros_msgs::FollowRefState > FollowRefStatePtr;
typedef boost::shared_ptr< ::imc_ros_msgs::FollowRefState const> FollowRefStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imc_ros_msgs::FollowRefState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imc_ros_msgs::FollowRefState_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::FollowRefState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.control_ent == rhs.control_ent &&
    lhs.reference == rhs.reference &&
    lhs.state == rhs.state &&
    lhs.plroximity == rhs.plroximity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imc_ros_msgs::FollowRefState_<ContainerAllocator1> & lhs, const ::imc_ros_msgs::FollowRefState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imc_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "726407b2cfb995059683aa882a05454a";
  }

  static const char* value(const ::imc_ros_msgs::FollowRefState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x726407b2cfb99505ULL;
  static const uint64_t static_value2 = 0x9683aa882a05454aULL;
};

template<class ContainerAllocator>
struct DataType< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/FollowRefState";
  }

  static const char* value(const ::imc_ros_msgs::FollowRefState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imc_ros_msgs/Header header\n"
"std_msgs/UInt8 control_ent\n"
"imc_ros_msgs/Reference reference\n"
"std_msgs/UInt8 state             # 1=Wait 2=goto 3=loiter 4=hover 5=elevator 6=timeout\n"
"std_msgs/UInt8 plroximity # 0x01=FAR 0x02=XY_NEAR 0x03=Z_NEAR 0x04=XY_UNREACHABLE 0x05=	Z_UNREACHABLE\n"
"\n"
"================================================================================\n"
"MSG: imc_ros_msgs/Header\n"
"std_msgs/Header rosheader\n"
"std_msgs/UInt16 sync\n"
"std_msgs/UInt16 mgid\n"
"std_msgs/UInt16 size\n"
"std_msgs/Float64 timestamp\n"
"std_msgs/UInt16 src\n"
"std_msgs/UInt8 src_ent\n"
"std_msgs/UInt16 dst\n"
"std_msgs/UInt8 dst_ent\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16\n"
"uint16 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
"\n"
"================================================================================\n"
"MSG: imc_ros_msgs/Reference\n"
"imc_ros_msgs/Header header\n"
"std_msgs/UInt8 flags \n"
"#      //! Use Location Reference.\n"
"#      FLAG_LOCATION = 0x01,\n"
"#      //! Use Speed Reference.\n"
"#      FLAG_SPEED = 0x02,\n"
"#      //! Use Z Reference.\n"
"#      FLAG_Z = 0x04,\n"
"#      //! Use Radius Reference.\n"
"#      FLAG_RADIUS = 0x08,\n"
"#      //! Use this Reference as Start Position for PathControler.\n"
"#      FLAG_START_POINT = 0x10,\n"
"#      //! Use Current Position as Start Position for PathControler.\n"
"#      FLAG_DIRECT = 0x20,\n"
"#      //! Flag Maneuver Completion.\n"
"#      FLAG_MANDONE = 0x80\n"
"imc_ros_msgs/DesiredSpeed speed\n"
"imc_ros_msgs/DesiredZ z\n"
"std_msgs/Float64 lat \n"
"std_msgs/Float64 lon\n"
"std_msgs/Float32 radius\n"
"\n"
"================================================================================\n"
"MSG: imc_ros_msgs/DesiredSpeed\n"
"imc_ros_msgs/Header header\n"
"std_msgs/Float64 value\n"
"std_msgs/UInt8 speed_units #Enumerated list, see IMC.xml\n"
"\n"
"================================================================================\n"
"MSG: imc_ros_msgs/DesiredZ\n"
"imc_ros_msgs/Header header\n"
"std_msgs/Float32 value #unit [m]\n"
"std_msgs/UInt8 z_units # depth/alt, see IMC.xml 0=none 1=depth 2=alt 3=height\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::imc_ros_msgs::FollowRefState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control_ent);
      stream.next(m.reference);
      stream.next(m.state);
      stream.next(m.plroximity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowRefState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imc_ros_msgs::FollowRefState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imc_ros_msgs::FollowRefState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::imc_ros_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_ent: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.control_ent);
    s << indent << "reference: ";
    s << std::endl;
    Printer< ::imc_ros_msgs::Reference_<ContainerAllocator> >::stream(s, indent + "  ", v.reference);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "plroximity: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.plroximity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMC_ROS_MSGS_MESSAGE_FOLLOWREFSTATE_H

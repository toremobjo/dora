# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imc_ros_msgs/SimulatedState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import imc_ros_msgs.msg
import std_msgs.msg

class SimulatedState(genpy.Message):
  _md5sum = "a9be16f13c86e9e2a7dc2db7679976ee"
  _type = "imc_ros_msgs/SimulatedState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """imc_ros_msgs/Header header
std_msgs/Float64 lat
std_msgs/Float64 lon
std_msgs/Float32 height
std_msgs/Float32 x
std_msgs/Float32 y
std_msgs/Float32 z
std_msgs/Float32 phi
std_msgs/Float32 theta
std_msgs/Float32 psi
std_msgs/Float32 u
std_msgs/Float32 v
std_msgs/Float32 w
std_msgs/Float32 p
std_msgs/Float32 q
std_msgs/Float32 r
std_msgs/Float32 svx
std_msgs/Float32 svy
std_msgs/Float32 svz

================================================================================
MSG: imc_ros_msgs/Header
std_msgs/Header rosheader
std_msgs/UInt16 sync
std_msgs/UInt16 mgid
std_msgs/UInt16 size
std_msgs/Float64 timestamp
std_msgs/UInt16 src
std_msgs/UInt8 src_ent
std_msgs/UInt16 dst
std_msgs/UInt8 dst_ent

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/UInt16
uint16 data

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/UInt8
uint8 data

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['header','lat','lon','height','x','y','z','phi','theta','psi','u','v','w','p','q','r','svx','svy','svz']
  _slot_types = ['imc_ros_msgs/Header','std_msgs/Float64','std_msgs/Float64','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lat,lon,height,x,y,z,phi,theta,psi,u,v,w,p,q,r,svx,svy,svz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimulatedState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.lat is None:
        self.lat = std_msgs.msg.Float64()
      if self.lon is None:
        self.lon = std_msgs.msg.Float64()
      if self.height is None:
        self.height = std_msgs.msg.Float32()
      if self.x is None:
        self.x = std_msgs.msg.Float32()
      if self.y is None:
        self.y = std_msgs.msg.Float32()
      if self.z is None:
        self.z = std_msgs.msg.Float32()
      if self.phi is None:
        self.phi = std_msgs.msg.Float32()
      if self.theta is None:
        self.theta = std_msgs.msg.Float32()
      if self.psi is None:
        self.psi = std_msgs.msg.Float32()
      if self.u is None:
        self.u = std_msgs.msg.Float32()
      if self.v is None:
        self.v = std_msgs.msg.Float32()
      if self.w is None:
        self.w = std_msgs.msg.Float32()
      if self.p is None:
        self.p = std_msgs.msg.Float32()
      if self.q is None:
        self.q = std_msgs.msg.Float32()
      if self.r is None:
        self.r = std_msgs.msg.Float32()
      if self.svx is None:
        self.svx = std_msgs.msg.Float32()
      if self.svy is None:
        self.svy = std_msgs.msg.Float32()
      if self.svz is None:
        self.svz = std_msgs.msg.Float32()
    else:
      self.header = imc_ros_msgs.msg.Header()
      self.lat = std_msgs.msg.Float64()
      self.lon = std_msgs.msg.Float64()
      self.height = std_msgs.msg.Float32()
      self.x = std_msgs.msg.Float32()
      self.y = std_msgs.msg.Float32()
      self.z = std_msgs.msg.Float32()
      self.phi = std_msgs.msg.Float32()
      self.theta = std_msgs.msg.Float32()
      self.psi = std_msgs.msg.Float32()
      self.u = std_msgs.msg.Float32()
      self.v = std_msgs.msg.Float32()
      self.w = std_msgs.msg.Float32()
      self.p = std_msgs.msg.Float32()
      self.q = std_msgs.msg.Float32()
      self.r = std_msgs.msg.Float32()
      self.svx = std_msgs.msg.Float32()
      self.svy = std_msgs.msg.Float32()
      self.svz = std_msgs.msg.Float32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs))
      _x = self.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3HdHBHB2d16f().pack(_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.lat.data, _x.lon.data, _x.height.data, _x.x.data, _x.y.data, _x.z.data, _x.phi.data, _x.theta.data, _x.psi.data, _x.u.data, _x.v.data, _x.w.data, _x.p.data, _x.q.data, _x.r.data, _x.svx.data, _x.svy.data, _x.svz.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.lat is None:
        self.lat = std_msgs.msg.Float64()
      if self.lon is None:
        self.lon = std_msgs.msg.Float64()
      if self.height is None:
        self.height = std_msgs.msg.Float32()
      if self.x is None:
        self.x = std_msgs.msg.Float32()
      if self.y is None:
        self.y = std_msgs.msg.Float32()
      if self.z is None:
        self.z = std_msgs.msg.Float32()
      if self.phi is None:
        self.phi = std_msgs.msg.Float32()
      if self.theta is None:
        self.theta = std_msgs.msg.Float32()
      if self.psi is None:
        self.psi = std_msgs.msg.Float32()
      if self.u is None:
        self.u = std_msgs.msg.Float32()
      if self.v is None:
        self.v = std_msgs.msg.Float32()
      if self.w is None:
        self.w = std_msgs.msg.Float32()
      if self.p is None:
        self.p = std_msgs.msg.Float32()
      if self.q is None:
        self.q = std_msgs.msg.Float32()
      if self.r is None:
        self.r = std_msgs.msg.Float32()
      if self.svx is None:
        self.svx = std_msgs.msg.Float32()
      if self.svy is None:
        self.svy = std_msgs.msg.Float32()
      if self.svz is None:
        self.svz = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.rosheader.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.lat.data, _x.lon.data, _x.height.data, _x.x.data, _x.y.data, _x.z.data, _x.phi.data, _x.theta.data, _x.psi.data, _x.u.data, _x.v.data, _x.w.data, _x.p.data, _x.q.data, _x.r.data, _x.svx.data, _x.svy.data, _x.svz.data,) = _get_struct_3HdHBHB2d16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs))
      _x = self.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3HdHBHB2d16f().pack(_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.lat.data, _x.lon.data, _x.height.data, _x.x.data, _x.y.data, _x.z.data, _x.phi.data, _x.theta.data, _x.psi.data, _x.u.data, _x.v.data, _x.w.data, _x.p.data, _x.q.data, _x.r.data, _x.svx.data, _x.svy.data, _x.svz.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.lat is None:
        self.lat = std_msgs.msg.Float64()
      if self.lon is None:
        self.lon = std_msgs.msg.Float64()
      if self.height is None:
        self.height = std_msgs.msg.Float32()
      if self.x is None:
        self.x = std_msgs.msg.Float32()
      if self.y is None:
        self.y = std_msgs.msg.Float32()
      if self.z is None:
        self.z = std_msgs.msg.Float32()
      if self.phi is None:
        self.phi = std_msgs.msg.Float32()
      if self.theta is None:
        self.theta = std_msgs.msg.Float32()
      if self.psi is None:
        self.psi = std_msgs.msg.Float32()
      if self.u is None:
        self.u = std_msgs.msg.Float32()
      if self.v is None:
        self.v = std_msgs.msg.Float32()
      if self.w is None:
        self.w = std_msgs.msg.Float32()
      if self.p is None:
        self.p = std_msgs.msg.Float32()
      if self.q is None:
        self.q = std_msgs.msg.Float32()
      if self.r is None:
        self.r = std_msgs.msg.Float32()
      if self.svx is None:
        self.svx = std_msgs.msg.Float32()
      if self.svy is None:
        self.svy = std_msgs.msg.Float32()
      if self.svz is None:
        self.svz = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.rosheader.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.lat.data, _x.lon.data, _x.height.data, _x.x.data, _x.y.data, _x.z.data, _x.phi.data, _x.theta.data, _x.psi.data, _x.u.data, _x.v.data, _x.w.data, _x.p.data, _x.q.data, _x.r.data, _x.svx.data, _x.svy.data, _x.svz.data,) = _get_struct_3HdHBHB2d16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3HdHBHB2d16f = None
def _get_struct_3HdHBHB2d16f():
    global _struct_3HdHBHB2d16f
    if _struct_3HdHBHB2d16f is None:
        _struct_3HdHBHB2d16f = struct.Struct("<3HdHBHB2d16f")
    return _struct_3HdHBHB2d16f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I

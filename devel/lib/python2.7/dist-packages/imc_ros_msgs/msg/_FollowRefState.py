# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imc_ros_msgs/FollowRefState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import imc_ros_msgs.msg
import std_msgs.msg

class FollowRefState(genpy.Message):
  _md5sum = "726407b2cfb995059683aa882a05454a"
  _type = "imc_ros_msgs/FollowRefState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """imc_ros_msgs/Header header
std_msgs/UInt8 control_ent
imc_ros_msgs/Reference reference
std_msgs/UInt8 state             # 1=Wait 2=goto 3=loiter 4=hover 5=elevator 6=timeout
std_msgs/UInt8 plroximity # 0x01=FAR 0x02=XY_NEAR 0x03=Z_NEAR 0x04=XY_UNREACHABLE 0x05=	Z_UNREACHABLE

================================================================================
MSG: imc_ros_msgs/Header
std_msgs/Header rosheader
std_msgs/UInt16 sync
std_msgs/UInt16 mgid
std_msgs/UInt16 size
std_msgs/Float64 timestamp
std_msgs/UInt16 src
std_msgs/UInt8 src_ent
std_msgs/UInt16 dst
std_msgs/UInt8 dst_ent

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/UInt16
uint16 data

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/UInt8
uint8 data

================================================================================
MSG: imc_ros_msgs/Reference
imc_ros_msgs/Header header
std_msgs/UInt8 flags 
#      //! Use Location Reference.
#      FLAG_LOCATION = 0x01,
#      //! Use Speed Reference.
#      FLAG_SPEED = 0x02,
#      //! Use Z Reference.
#      FLAG_Z = 0x04,
#      //! Use Radius Reference.
#      FLAG_RADIUS = 0x08,
#      //! Use this Reference as Start Position for PathControler.
#      FLAG_START_POINT = 0x10,
#      //! Use Current Position as Start Position for PathControler.
#      FLAG_DIRECT = 0x20,
#      //! Flag Maneuver Completion.
#      FLAG_MANDONE = 0x80
imc_ros_msgs/DesiredSpeed speed
imc_ros_msgs/DesiredZ z
std_msgs/Float64 lat 
std_msgs/Float64 lon
std_msgs/Float32 radius

================================================================================
MSG: imc_ros_msgs/DesiredSpeed
imc_ros_msgs/Header header
std_msgs/Float64 value
std_msgs/UInt8 speed_units #Enumerated list, see IMC.xml

================================================================================
MSG: imc_ros_msgs/DesiredZ
imc_ros_msgs/Header header
std_msgs/Float32 value #unit [m]
std_msgs/UInt8 z_units # depth/alt, see IMC.xml 0=none 1=depth 2=alt 3=height

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['header','control_ent','reference','state','plroximity']
  _slot_types = ['imc_ros_msgs/Header','std_msgs/UInt8','imc_ros_msgs/Reference','std_msgs/UInt8','std_msgs/UInt8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,control_ent,reference,state,plroximity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FollowRefState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.control_ent is None:
        self.control_ent = std_msgs.msg.UInt8()
      if self.reference is None:
        self.reference = imc_ros_msgs.msg.Reference()
      if self.state is None:
        self.state = std_msgs.msg.UInt8()
      if self.plroximity is None:
        self.plroximity = std_msgs.msg.UInt8()
    else:
      self.header = imc_ros_msgs.msg.Header()
      self.control_ent = std_msgs.msg.UInt8()
      self.reference = imc_ros_msgs.msg.Reference()
      self.state = std_msgs.msg.UInt8()
      self.plroximity = std_msgs.msg.UInt8()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs))
      _x = self.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBH2B3I().pack(_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.control_ent.data, _x.reference.header.rosheader.seq, _x.reference.header.rosheader.stamp.secs, _x.reference.header.rosheader.stamp.nsecs))
      _x = self.reference.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBH2B3I().pack(_x.reference.header.sync.data, _x.reference.header.mgid.data, _x.reference.header.size.data, _x.reference.header.timestamp.data, _x.reference.header.src.data, _x.reference.header.src_ent.data, _x.reference.header.dst.data, _x.reference.header.dst_ent.data, _x.reference.flags.data, _x.reference.speed.header.rosheader.seq, _x.reference.speed.header.rosheader.stamp.secs, _x.reference.speed.header.rosheader.stamp.nsecs))
      _x = self.reference.speed.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBHBdB3I().pack(_x.reference.speed.header.sync.data, _x.reference.speed.header.mgid.data, _x.reference.speed.header.size.data, _x.reference.speed.header.timestamp.data, _x.reference.speed.header.src.data, _x.reference.speed.header.src_ent.data, _x.reference.speed.header.dst.data, _x.reference.speed.header.dst_ent.data, _x.reference.speed.value.data, _x.reference.speed.speed_units.data, _x.reference.z.header.rosheader.seq, _x.reference.z.header.rosheader.stamp.secs, _x.reference.z.header.rosheader.stamp.nsecs))
      _x = self.reference.z.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBHBfB2df2B().pack(_x.reference.z.header.sync.data, _x.reference.z.header.mgid.data, _x.reference.z.header.size.data, _x.reference.z.header.timestamp.data, _x.reference.z.header.src.data, _x.reference.z.header.src_ent.data, _x.reference.z.header.dst.data, _x.reference.z.header.dst_ent.data, _x.reference.z.value.data, _x.reference.z.z_units.data, _x.reference.lat.data, _x.reference.lon.data, _x.reference.radius.data, _x.state.data, _x.plroximity.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.control_ent is None:
        self.control_ent = std_msgs.msg.UInt8()
      if self.reference is None:
        self.reference = imc_ros_msgs.msg.Reference()
      if self.state is None:
        self.state = std_msgs.msg.UInt8()
      if self.plroximity is None:
        self.plroximity = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.control_ent.data, _x.reference.header.rosheader.seq, _x.reference.header.rosheader.stamp.secs, _x.reference.header.rosheader.stamp.nsecs,) = _get_struct_3HdHBH2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.reference.header.sync.data, _x.reference.header.mgid.data, _x.reference.header.size.data, _x.reference.header.timestamp.data, _x.reference.header.src.data, _x.reference.header.src_ent.data, _x.reference.header.dst.data, _x.reference.header.dst_ent.data, _x.reference.flags.data, _x.reference.speed.header.rosheader.seq, _x.reference.speed.header.rosheader.stamp.secs, _x.reference.speed.header.rosheader.stamp.nsecs,) = _get_struct_3HdHBH2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference.speed.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference.speed.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.reference.speed.header.sync.data, _x.reference.speed.header.mgid.data, _x.reference.speed.header.size.data, _x.reference.speed.header.timestamp.data, _x.reference.speed.header.src.data, _x.reference.speed.header.src_ent.data, _x.reference.speed.header.dst.data, _x.reference.speed.header.dst_ent.data, _x.reference.speed.value.data, _x.reference.speed.speed_units.data, _x.reference.z.header.rosheader.seq, _x.reference.z.header.rosheader.stamp.secs, _x.reference.z.header.rosheader.stamp.nsecs,) = _get_struct_3HdHBHBdB3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference.z.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference.z.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.reference.z.header.sync.data, _x.reference.z.header.mgid.data, _x.reference.z.header.size.data, _x.reference.z.header.timestamp.data, _x.reference.z.header.src.data, _x.reference.z.header.src_ent.data, _x.reference.z.header.dst.data, _x.reference.z.header.dst_ent.data, _x.reference.z.value.data, _x.reference.z.z_units.data, _x.reference.lat.data, _x.reference.lon.data, _x.reference.radius.data, _x.state.data, _x.plroximity.data,) = _get_struct_3HdHBHBfB2df2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs))
      _x = self.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBH2B3I().pack(_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.control_ent.data, _x.reference.header.rosheader.seq, _x.reference.header.rosheader.stamp.secs, _x.reference.header.rosheader.stamp.nsecs))
      _x = self.reference.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBH2B3I().pack(_x.reference.header.sync.data, _x.reference.header.mgid.data, _x.reference.header.size.data, _x.reference.header.timestamp.data, _x.reference.header.src.data, _x.reference.header.src_ent.data, _x.reference.header.dst.data, _x.reference.header.dst_ent.data, _x.reference.flags.data, _x.reference.speed.header.rosheader.seq, _x.reference.speed.header.rosheader.stamp.secs, _x.reference.speed.header.rosheader.stamp.nsecs))
      _x = self.reference.speed.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBHBdB3I().pack(_x.reference.speed.header.sync.data, _x.reference.speed.header.mgid.data, _x.reference.speed.header.size.data, _x.reference.speed.header.timestamp.data, _x.reference.speed.header.src.data, _x.reference.speed.header.src_ent.data, _x.reference.speed.header.dst.data, _x.reference.speed.header.dst_ent.data, _x.reference.speed.value.data, _x.reference.speed.speed_units.data, _x.reference.z.header.rosheader.seq, _x.reference.z.header.rosheader.stamp.secs, _x.reference.z.header.rosheader.stamp.nsecs))
      _x = self.reference.z.header.rosheader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3HdHBHBfB2df2B().pack(_x.reference.z.header.sync.data, _x.reference.z.header.mgid.data, _x.reference.z.header.size.data, _x.reference.z.header.timestamp.data, _x.reference.z.header.src.data, _x.reference.z.header.src_ent.data, _x.reference.z.header.dst.data, _x.reference.z.header.dst_ent.data, _x.reference.z.value.data, _x.reference.z.z_units.data, _x.reference.lat.data, _x.reference.lon.data, _x.reference.radius.data, _x.state.data, _x.plroximity.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = imc_ros_msgs.msg.Header()
      if self.control_ent is None:
        self.control_ent = std_msgs.msg.UInt8()
      if self.reference is None:
        self.reference = imc_ros_msgs.msg.Reference()
      if self.state is None:
        self.state = std_msgs.msg.UInt8()
      if self.plroximity is None:
        self.plroximity = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.rosheader.seq, _x.header.rosheader.stamp.secs, _x.header.rosheader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.header.sync.data, _x.header.mgid.data, _x.header.size.data, _x.header.timestamp.data, _x.header.src.data, _x.header.src_ent.data, _x.header.dst.data, _x.header.dst_ent.data, _x.control_ent.data, _x.reference.header.rosheader.seq, _x.reference.header.rosheader.stamp.secs, _x.reference.header.rosheader.stamp.nsecs,) = _get_struct_3HdHBH2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.reference.header.sync.data, _x.reference.header.mgid.data, _x.reference.header.size.data, _x.reference.header.timestamp.data, _x.reference.header.src.data, _x.reference.header.src_ent.data, _x.reference.header.dst.data, _x.reference.header.dst_ent.data, _x.reference.flags.data, _x.reference.speed.header.rosheader.seq, _x.reference.speed.header.rosheader.stamp.secs, _x.reference.speed.header.rosheader.stamp.nsecs,) = _get_struct_3HdHBH2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference.speed.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference.speed.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.reference.speed.header.sync.data, _x.reference.speed.header.mgid.data, _x.reference.speed.header.size.data, _x.reference.speed.header.timestamp.data, _x.reference.speed.header.src.data, _x.reference.speed.header.src_ent.data, _x.reference.speed.header.dst.data, _x.reference.speed.header.dst_ent.data, _x.reference.speed.value.data, _x.reference.speed.speed_units.data, _x.reference.z.header.rosheader.seq, _x.reference.z.header.rosheader.stamp.secs, _x.reference.z.header.rosheader.stamp.nsecs,) = _get_struct_3HdHBHBdB3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference.z.header.rosheader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference.z.header.rosheader.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.reference.z.header.sync.data, _x.reference.z.header.mgid.data, _x.reference.z.header.size.data, _x.reference.z.header.timestamp.data, _x.reference.z.header.src.data, _x.reference.z.header.src_ent.data, _x.reference.z.header.dst.data, _x.reference.z.header.dst_ent.data, _x.reference.z.value.data, _x.reference.z.z_units.data, _x.reference.lat.data, _x.reference.lon.data, _x.reference.radius.data, _x.state.data, _x.plroximity.data,) = _get_struct_3HdHBHBfB2df2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3HdHBH2B3I = None
def _get_struct_3HdHBH2B3I():
    global _struct_3HdHBH2B3I
    if _struct_3HdHBH2B3I is None:
        _struct_3HdHBH2B3I = struct.Struct("<3HdHBH2B3I")
    return _struct_3HdHBH2B3I
_struct_3HdHBHBdB3I = None
def _get_struct_3HdHBHBdB3I():
    global _struct_3HdHBHBdB3I
    if _struct_3HdHBHBdB3I is None:
        _struct_3HdHBHBdB3I = struct.Struct("<3HdHBHBdB3I")
    return _struct_3HdHBHBdB3I
_struct_3HdHBHBfB2df2B = None
def _get_struct_3HdHBHBfB2df2B():
    global _struct_3HdHBHBfB2df2B
    if _struct_3HdHBHBfB2df2B is None:
        _struct_3HdHBHBfB2df2B = struct.Struct("<3HdHBHBfB2df2B")
    return _struct_3HdHBHBfB2df2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
